#! /usr/bin/env perl

use strict;
use warnings;
use Carp::Always;

use constant { TRUE => 1, FALSE => 0 };

# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_h;
our $opt_i;

sub usage {
  my $progname = basename($0);
  print STDERR "Usage: ls -d genomes/GCA_* | $progname [options] assembly_summary.txt | bash -x\n";
  print STDERR "-h - print help\n";
  print STDERR "-i - ignore directories without assembly info\n";
  exit(@_);
}

my $stat = getopts('hi');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}
if (scalar(@ARGV) != 1) {
  usage(1);
}

# ------------------------------------------------------------------------

my %missing;
my %paths;

while ( <STDIN> ) {
  chomp;
  s/^ +//;
  s/ +$//;
  my $full_path = $_;
  my $raw_name = basename($full_path);
  $paths{$raw_name} = $full_path;
  $missing{$raw_name} = TRUE;
}

delete $missing{ftp_path};

# ------------------------------------------------------------------------

my %data;

{
  my $h = {};
  $h->{assembly_accession} = "None";
  $h->{organism_name} =  "None";
  $h->{infraspecific_name} = "None";
  $h->{isolate} =   "None";
  $h->{biosample} = "None";
  $h->{asm_name} = "None";
  $data{"None"} = $h;
}

sub simplify {
  my ($s) = @_;
  $s =~ s/^strain=//;
  $s =~ s/[\[\]\(\)]//g;
  $s =~ s/[#=',\/:;]+/_/g;
  $s =~ s/%/ pers /g;
  $s =~ s/\*/ star /g;
  $s =~ s/\+/ plus /g;
  $s =~ s/\?/ question /g;
  $s =~ s/[_ ]+/_/g;
  $s =~ s/([a-z])\.(_|$)/$1$2/g;
  if ( $s =~ /[^a-zA-Z0-9_.-]+/ ) { print "$s\n"; }
  return $s;
}

open(my $fh,"<",$ARGV[0]) || die;
while (<$fh>) {
  chomp;
  my ($assembly_accession,$bioproject,$biosample,$wgs_master,
      $refseq_category,$taxid,$species_taxid,$organism_name,$infraspecific_name,
      $isolate,$version_status,$assembly_level,$release_type,$genome_rep,
      $seq_rel_date,$asm_name,$submitter,$gbrs_paired_asm,$paired_asm_comp,
      $ftp_path) = split(/\t/);
  if ( /^#/ ) {
    next;
  }
  my $raw_name;
  foreach my $s ($assembly_accession, basename($ftp_path)) {
    if ( defined($paths{$s}) ) {
      delete $missing{$s};
      $raw_name = $s;
      last;
    }
  }
  if (!defined($raw_name)) { next; }
  my $h = {};
  $h->{assembly_accession} = simplify($assembly_accession);
  $h->{organism_name} = simplify($organism_name);
  $h->{infraspecific_name} = simplify($infraspecific_name);
  $h->{isolate} = simplify($isolate);
  $h->{biosample} = simplify($biosample);
  $h->{asm_name} = simplify($asm_name);
  $data{$raw_name} = $h;
}
close $fh;

# ------------------------------------------------------------------------

if ( !$opt_i && 0 < scalar(keys(%missing)) ) {
  print STDERR "Assembly identifiers not found in summary:\n";
  foreach my $raw_name (sort(keys(%missing))) {
    print STDERR $raw_name,"\n";
  }
  exit 1;
}

# ------------------------------------------------------------------------

my %names;

sub sensible_join {
  my ($s,@l) = @_;
  my @ll;
  foreach my $t ( @l ) {
    if ( defined($t) && $t ne "") {
      push @ll, $t;
    }
  }
  return join($s,@ll);
}

sub add_names {
  my ($prefix,$field,@raw_names) = @_;
  foreach my $raw_name ( @raw_names ) {
    my $h = $data{$raw_name};
    my $suffix = $h->{$field};
    my $name = sensible_join("_",$prefix,$suffix);
    if (!defined($names{$name})) {
      $names{$name} = [];
    }
    push @{$names{$name}}, $raw_name;
  }
}

sub find_dups {
  my @todo;

  foreach my $name ( keys %names ) {
    if ( 1 < scalar(@{$names{$name}}) ) {
      push @todo, $name;
    }
  }
  return @todo;
}


$names{""} = [keys %data];

foreach my $field ("organism_name","infraspecific_name", "isolate", "assembly_accession" ) {
  foreach my $name ( find_dups() ) {
    my @l = @{$names{$name}};
    delete $names{$name};
    add_names($name,$field,@l);
  }
}

# ------------------------------------------------------------------------

# sanity check

my $errors = FALSE;
foreach my $name ( sort ( keys %names ) ) {
  my @l = @{$names{$name}};
  if ( 1 < scalar(@l) ) {
    if (!$errors) {
      print STDERR "Failed to compute unique names:\n";
      $errors = TRUE;
    }
    print STDERR join(" ",$name," <-",join(", ",@l)),"\n";
  }
}
if ( $errors ) { exit 1; }

# ------------------------------------------------------------------------

foreach my $name ( sort ( keys %names ) ) {
  my @l = @{$names{$name}};
  (1 == scalar(@l)) || die;
  my $raw_name = $l[0];
  if ( $raw_name eq "None" ) { next; }
  my $full_path = $paths{$raw_name};
  my $dir = dirname($full_path);
  print "mv -i $full_path $dir/$name\n";
}
